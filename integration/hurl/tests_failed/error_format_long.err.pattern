* Request can be run with the following curl command:
* curl 'http://localhost:8000/error-format-long/html'

HTTP/1.1 200
Server: Werkzeug/<<<.*?>>> Python/<<<.*?>>>
Date: <<<.*?>>>
Content-Type: text/html; charset=utf-8
Content-Length: 45
Server: Flask Server
Connection: close

<html><head><title>Test</title></head></html>

error: Assert header value
  --> tests_failed/error_format_long.hurl:7:15
   |
   | GET http://localhost:8000/error-format-long/html
   | ...
 7 | Content-Type: text/html
   |               ^^^^^^^^^ actual value is <text/html; charset=utf-8>
   |

error: Assert failure
  --> tests_failed/error_format_long.hurl:9:0
   |
   | GET http://localhost:8000/error-format-long/html
   | ...
 9 | xpath "string(//head/title)" == "Welcome!"
   |   actual:   string <Test>
   |   expected: string <Welcome!>
   |

error: Assert failure
  --> tests_failed/error_format_long.hurl:11:0
   |
   | GET http://localhost:8000/error-format-long/html
   | ...
11 | xpath "//title" count == 2
   |   actual:   integer <1>
   |   expected: integer <2>
   |

* Request can be run with the following curl command:
* curl 'http://localhost:8000/error-format-long/json'

HTTP/1.1 200
Server: Werkzeug/<<<.*?>>> Python/<<<.*?>>>
Date: <<<.*?>>>
Content-Type: application/json
Content-Length: 115
Server: Flask Server
Connection: close

{"books": [{"name": "Dune", "author": "Franck Herbert"}, {"name": "Les Mis\u00e9rables", "author": "Victor Hugo"}]}

error: Assert failure
  --> tests_failed/error_format_long.hurl:18:0
   |
   | GET http://localhost:8000/error-format-long/json
   | ...
18 | jsonpath "$.books" count == 12
   |   actual:   integer <2>
   |   expected: integer <12>
   |

* Request can be run with the following curl command:
* curl 'http://localhost:8000/error-format-long/rfc-7807'

HTTP/1.1 200
Server: Werkzeug/<<<.*?>>> Python/<<<.*?>>>
Date: <<<.*?>>>
Content-Type: application/problem+json
Content-Length: 258
Server: Flask Server
Connection: close

{"type": "https://example.com/probs/out-of-credit", "title": "You do not have enough credit.", "detail": "Your current balance is 30, but that costs 50.", "instance": "/account/12345/msgs/abc", "balance": 30, "accounts": ["/account/12345", "/account/67890"]}

error: Assert failure
  --> tests_failed/error_format_long.hurl:26:0
   |
   | GET http://localhost:8000/error-format-long/rfc-7807
   | ...
26 | jsonpath "$.title" == "You have enough credit."
   |   actual:   string <You do not have enough credit.>
   |   expected: string <You have enough credit.>
   |

* Request can be run with the following curl command:
* curl 'http://localhost:8000/error-format-long/fhir'

HTTP/1.1 200
Server: Werkzeug/<<<.*?>>> Python/<<<.*?>>>
Date: <<<.*?>>>
Content-Type: application/fhir+json
Content-Length: 902
Server: Flask Server
Connection: close

{"resourceType": "Practitioner", "id": "example", "text": {"status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n      <p>Dr Adam Careful is a Referring Practitioner for Acme Hospital from 1-Jan 2012 to 31-Mar\n        2012</p>\n    </div>"}, "identifier": [{"system": "http://www.acme.org/practitioners", "value": "23"}], "active": true, "name": [{"family": "Careful", "given": ["Adam"], "prefix": ["Dr"]}], "address": [{"use": "home", "line": ["534 Erewhon St"], "city": "PleasantVille", "state": "Vic", "postalCode": "3999"}], "qualification": [{"identifier": [{"system": "http://example.org/UniversityIdentifier", "value": "12345"}], "code": {"coding": [{"system": "http://terminology.hl7.org/CodeSystem/v2-0360/2.7", "code": "BS", "display": "Bachelor of Science"}], "text": "Bachelor of Science"}, "period": {"start": "1995"}, "issuer": {"display": "Example University"}}]}

error: Assert failure
  --> tests_failed/error_format_long.hurl:34:0
   |
   | GET http://localhost:8000/error-format-long/fhir
   | ...
34 | jsonpath "$.id" == "foo"
   |   actual:   string <example>
   |   expected: string <foo>
   |

* Request can be run with the following curl command:
* curl 'http://localhost:8000/error-format-long/csv'

HTTP/1.1 200
Server: Werkzeug/<<<.*?>>> Python/<<<.*?>>>
Date: <<<.*?>>>
Content-Type: text/csv; charset=utf-8
Content-Length: 726
Server: Flask Server
Connection: close

"Year","Score","Title"
1968,86,"Greetings"
1970,17,"Bloody Mama"
1970,73,"Hi, Mom!"
1971,40,"Born to Win"
1973,98,"Mean Streets"
1973,88,"Bang the Drum Slowly"
1974,97,"The Godfather, Part II"
1976,41,"The Last Tycoon"
1976,99,"Taxi Driver"
1977,47,"1900"
1977,67,"New York, New York"
1978,93,"The Deer Hunter"
1980,97,"Raging Bull"
1981,75,"True Confessions"
1983,90,"The King of Comedy"
1984,89,"Once Upon a Time in America"
1984,60,"Falling in Love"
1985,98,"Brazil"
1986,65,"The Mission"
1987,00,"Dear America: Letters Home From Vietnam"
1987,80,"The Untouchables"
1987,78,"Angel Heart"
1988,96,"Midnight Run"
1989,64,"Jacknife"
1989,47,"We're No Angels"
1990,88,"Awakenings"
1990,29,"Stanley & Iris"
1990,96,"Goodfellas"


error: Assert failure
  --> tests_failed/error_format_long.hurl:42:0
   |
   | GET http://localhost:8000/error-format-long/csv
   | ...
42 | body split "\n" nth 9 split "," nth 2 == "\"Taxi\""
   |   actual:   string <"Taxi Driver">
   |   expected: string <"Taxi">
   |

* Request can be run with the following curl command:
* curl 'http://localhost:8000/error-format-long/bytes'

HTTP/1.1 200
Server: Werkzeug/<<<.*?>>> Python/<<<.*?>>>
Date: <<<.*?>>>
Content-Type: application/octet-stream
Content-Length: 4
Server: Flask Server
Connection: close

Bytes <deadbeef...>

error: Assert failure
  --> tests_failed/error_format_long.hurl:50:0
   |
   | GET http://localhost:8000/error-format-long/bytes
   | ...
50 | bytes == hex,beef;
   |   actual:   bytes <deadbeef>
   |   expected: bytes <beef>
   |

